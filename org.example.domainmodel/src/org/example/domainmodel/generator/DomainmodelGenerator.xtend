/*
 * generated by Xtext 2.21.0
 */
package org.example.domainmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.example.domainmodel.domainmodel.Entity
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import org.example.domainmodel.domainmodel.Feature

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DomainmodelGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider
	
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		// We need to iterate a resource with all its deeply nested elements.
		// Then, how we determine the file name of the Java class that each Entity should yield?
		// The qualified name itself has to be obtained from a special service that is available for each language
		// ^-> We simply injected the IQualifiedNameProvider into the generator
		for (e : resource.allContents.toIterable.filter(Entity)) {
			fsa.generateFile(
            	e.fullyQualifiedName.toString("/") + ".java",
            	e.compile)
        }
	}
	
	// Write the actual template code for an entity.
	// The package declaration has to be wrapped in an IF expression
	// to not fail if the Entity is not contained in a package
	// Also handle the superType of an Entity gracefully by using another IF expression
	def compile(Entity e) '''
	    «IF e.eContainer.fullyQualifiedName !== null»
	        package «e.eContainer.fullyQualifiedName»;
	    «ENDIF»
	        
	    public class «e.name» «IF e.superType !== null» extends «e.superType.fullyQualifiedName» «ENDIF»{
	        «FOR f:e.features»
	            «f.compile»
	        «ENDFOR»
	    }
    '''
    
    // Add support for the Java properties that each of the declared features should yield;
    // compiles a single feature to the respective Java code
    def compile(Feature f) '''
        private «f.type.fullyQualifiedName» «f.name»;
            
        public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
            return «f.name»;
        }
            
        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
            this.«f.name» = «f.name»;
        }
    '''
    
    // TODO: As a small exercise, you could implement support for the many attribute of a Feature
    // or enforce naming conventions, e.g. generated field names should start with an underscore.
}
